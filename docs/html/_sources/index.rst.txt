pyCRP: python Continuous Readout Processing documentation
=================================

Overview
---------------------------------

**1. Introduction** 

This package provides triggering and optimum-filter reconstruction on continuous data stream with an easily manageable configuration interface. The current implemented IO functions support data from SuperCDMS-MIDAS, SuperCDMS-Animal and. User can also use a customized IO function for their particular data format.

The triggering process is demonstrated in the following figure: an optional filter (optimal filter, Gaussian filter, or other customized kernels that are not shown) is applied to the raw trace to reduce the noise; a threshold trigger is performed on the filtered trace and trigger points are shown in dots. Around each trigger points, a piece of trace is selected for further reconstruction and calculation of reduced quantities (RQs).

This rather simple process can get cumbersum when the sturcture of data is complicated. For example, when there are multiple channels with different setup and requires different filtering/trigger threshold, etc. Or when there are hundreds of files to process, a way to run multiple jobs in parallel is helpful. These are taken care of by this package:

A configuration file that can be generated by a Graphic User Interface (GUI) give you easy access and reproducibility of tens of parameters
It also supports batch processing for LSF batch system (slurm job submission is to be implemented).

**2. Installation**

*2.1. Dependencies*

A. If you have access to cdms software release via cvmfs, setup the environment with

    ``source /cvmfs/cdms.opensciencegrid.org/setup_cdms.sh V04-03``
    
If there are still some packages missing, they usually can be installed with the command ``pip install PACKAGE_NAME --user``

B. If you are on a local computer, conda can be used to install dependencies

In the parent directory of pycrp, a new environment ``pycrp_env`` with dependencies can be created:
    
    ``conda env create --prefix ./pycrp_env --file pyCRP/environment.yml``
    ``conda activate ./pycrp_env``

This will not install `pyROOT` and SuperCDMS `pyRawIO`. pyCRP can work without pyROOT and pyRawIO.  `pyROOT` is only used in the likelihood fit in pyCRP. `pyRawIO` provide interface for SuperCMDS MIDAS data. It may be challenging to install SuperCDMS `pyRawIO`, as it requires `boost-python`,`pyROOT`, SuperCDMS `BatCommon` and `IOLibrary`. An alternate is the python interface provided by `MIDAS <https://midas.triumf.ca/MidasWiki/index.php/Python>`_. To install this midas python interface, download code from `Bitbucket <https://bitbucket.org/tmidas/midas/src/develop/python/>`_, and do
    
    ``pip install midas/python --user``

C. If you are using Narvel, use the singularity image instead.
    
    ``module load sigularity`` 
    
    ``singularity exec -B "/project/def-zqhong/" /project/def-zqhong/RicochetSoftware/singularity/RicochetSoft-v1.4/ricochetsoft.sif run_processing --series "SERIES_NUMBER" --config "CONFIG_FILE" (--overwrite) (--overwrite_psd)``
    
To rebuild the sigularity image, find the recipe file and do:
    
    ``singularity build --remote /project/def-zqhong/RicochetSoftware/singularity/RicochetSoft-v1.4/ricochetsoft.sif ./ricochetsoft.recipe``
    
Need to `re-create token <https://cloud.sylabs.io/tokens>`_ every month, To reset token: 
    
    ``singularity remote login``
    
*2.2 Installing with pip*

We highly recommed using `pip` and/or `virtualenv` to manage your python packages, but you can also just edit your paths if desired.

Download pycrp repository,

     ``git clone git@gitlab.com:supercdms/Analysis/pyCRP.git``

Inside the pyCRP directory **where you can see setup.py**, 

     ``pip install -e . --user --no-use-pep517``
     
`-e` option installs pycrp with edit mode, `--user` option will let you install into your user directory if you don't have admin permissions, `--no-use-pep517` needed because pep517 does not support -e or --user

Or you can directly install by running ``pip install .`` if you have admin permission

**3. Working with git**

To clone this repository first you need to set up a GitLab account with a two-factor authentication and request an access to the SuperCDMS group, as described here: `confluence <https://confluence.slac.stanford.edu/display/CDMS/Getting+Started+with+Git>`_

Cloning:
    
    ``git clone git@gitlab.com:supercdms/Analysis/pyCRP.git``
    
Alternative repo if you can access bitbucket:

    ``git clone git@bitbucket.org:phys-ricochet/pycrp.git``
    
If you wish to commit to the repo, please switch to the develop branch:

    ``cd pyCRP``
    ``git checkout -b develop origin/develop``

If you are developing a new feature, create your own branch and merge it to develop when you are done. Do not commit directly to the master branch!

1. Create a new branch ``git branch your_branch``. Or if you have one already, switch to it, and merge the develop into it: ``git checkout your_branch``, ``git merge develop``
2. Develope features, commit as usual ``git add .``, ``git commit -m 'Commit message: describe your changes here'``
3. To push your commits to gitlab, do ``git push -u origin your_branch``
4. When you wish to merge your code to the common branch (develop), do ``git checkout develop``, ``get merge your_branch``, ``git push --all origin``

**4. Example notebooks for beginners**

`Optimal Filter <https://gitlab.com/supercdms/Analysis/pyCRP/-/blob/master/pycrp/notebook_examples/OF_demonstration.ipynb>`_ or `bitbucket link <https://bitbucket.org/phys-ricochet/pycrp/src/master/pycrp/notebook_examples/OF_demonstration.ipynb>`_

`pyCRP example <https://gitlab.com/supercdms/Analysis/pyCRP/-/blob/master/pycrp/notebook_examples/pyCRP_Example.ipynb>`_ or `bitbucket link <https://bitbucket.org/phys-ricochet/pycrp/src/master/pycrp/notebook_examples/pyCRP_Example.ipynb>`_

You can download them and run with jupyter notebook. The Optimal filter aims to give you a rough idea on how optimal filter works, while the pyCRP tells you how to make a config file and do analysis with pyCRP.

It's always a good idea to test with the *processing debug* notebook. You can find it under ``pycrp/processing`` directory


Frequently Encountered Errors
---------------------------------

* local variable 'traces' referenced before assignment

While running run_processing.py, you get the error:

local variable 'traces' referenced before assignment

this means the series you told it to process is empty; it does not actually have any data in it.

This could be because it does not exist. Check:

Did you spell the series name correctly?

Did you give it the right data directory?



* _optimum_filter.py: np.dot(Tf.Conjugate/J,Tf) incompatible shapes

While make RQs, you encounter an "incompatible shapes" error in this line of _optimum_filter.py:
np.dot(Tf.Conjugate/J,Tf)

The error likely isn't in regards to the np.dot, but rather in regards to Tf.Conjugate/J.

J has length equal to TRACE_LENGTH in your config.

Meanwhile Tf is your template, it has length depending on what you had set your template as.

These two lengths have to be equal for division to make sense.

If you are using the "default" template option in your config, verify that that has the same length as your TRACE_LENGTH

Alternatively just use an "analytic:20e-6,80e-6" template for Animal data.



* "PSD autocut acceptance is always 0!" error

While calculating PSDs, you recieve the massage "Autocuts are too harsh, rerunning random triggering" for a few times, 
then encounter a "PSD autocut acceptance is always 0!" error :

"Autocut" function decided there are pulses in most(>99%) of the traces selected, and rejected all of them.

You can include more traces before autocut: increase config.PSD_MAX_TRACES and config.PSD_FILES
Or use a shorter trace length.

If you want to include the pulses in your PSDs (*usually you don't*), Set traces_cut=traces to skip the auto cut.



Scripts
==========================

.. toctree::
   :maxdepth: 2
   :caption: Contents:


Fitting tools
--------------------------
One useful function in this script is the ``pycrp.Fit.fitGaus_from_hist``, it fits a gaussian from histgram. Use this function if you need to fit from a histgram of some OFs. It assumes Poissonian error for each of the bin but we approximate the error as Gaussian so we still use the least squares method for fitting.

Fitb uses the lmfit (Non-Linear Least-Squares Minimization and Curve-Fitting for Python) package for curve fitting for different distributions. 

.. automodule:: pycrp._fit
    :members:
    :undoc-members:
    :private-members:

IO
--------------------------
Loading data

If you want to add new datatype to pyCRP, make a io_{datatype}.py file and add {datatype} to the following list in _io.py: 

Find ``if data_type in ["NEXUS", "Animal", "UMass", "MIT", "Argonne"]:``

and change it to``if data_type in ["NEXUS", "Animal", "UMass", "MIT", "Argonne", "{datatype}"]:``

See io_template for how to add a new io type

.. automodule:: pycrp._io
    :members:
    :undoc-members:
    :private-members:

Trigger
--------------------------
To process a continous stream of data, you will first need to trigger at the pulses.

There are four types of trigger algorithm in pyCRP: random, reshape, threshold, and shaping. 

**1. Random trigger**

The random trigger works by randomly picking trigger points in the raw trace.

Suppose you have a raw trace of 100k samples, and you want the event trace length to be 8192 (4096 pretrigger and 4096 posttrigger). If the random trigger rate is 5, then the random trigger will randomly pick 5 numbers between 4096 to 100k-4096 as the trigger point. You may choose if you don't want any overlap between traces. In this example, if you want no overlap, the minimum distance between any two random triggers will be 8192.

**2. Reshape**

You rarely need this. Suppose you have a raw trace of 100k samples, and you want the event trace length to be 8192 (4096 pretrigger and 4096 posttrigger), then starting from 4096, it will trigger every 8192 samples until there are not enough samples after the trigger point.

**3. Threshold trigger**

Trigger when the signal exceeds a given value. 

Tips: If you want to trigger on the failing edge of the signal, you can flip the raw trace by setting the gain of that channel to -1 in the config file. Then the failing edge becomes the raising edge!

**4. Threshold trigger with shaping**

This is the trigger we usually use for pulse triggering. 

Shaping is also a threshold trigger, but some filter will be applied on the raw traces before triggering to reject noise.

The most common filter we use is the Gaussian filter with given order(usually 1 which means derivative), sigma, truncation(in unit of sigma). For details about Gaussian filter see `slide 40 of this presentation <https://www.cs.cornell.edu/courses/cs6670/2011sp/lectures/lec02_filter.pdf>`_ or just Google "gaussian derivative filter".


.. automodule:: pycrp._trigger
    :members:
    :undoc-members:
    :private-members:

Cut methods
--------------------------
The _cut.py script includes a function that removes outliers with statistical methods. 

.. automodule:: pycrp._cut
    :members:
    :undoc-members:
    :private-members:

Midas
--------------------------
Functions to load NEXUS midas data directly with midas python interface.

.. automodule:: pycrp._midas
    :members:
    :undoc-members:
    :private-members:

Noise
--------------------------
Calculate the amplitude spectral density of noise traces.The unit is *pA/sqrt(Hz)*, but named PSD, Power Spectral Density, in the code for historical reason. Usually PSDs have the unit of *sq(W)/Hz*). 

You can also simulate a Gaussian noise with given noise PSD by ``get_noise_trace()``, and plot the PSD by ``plotPSD()``

.. automodule:: pycrp._noise
    :members:
    :undoc-members:
    :private-members:

Optimum Filter
--------------------------
Apply Optimum Filter on traces.


.. automodule:: pycrp._optimum_filter
    :members:
    :undoc-members:
    :private-members:


Reduced Quantities (RQs)
--------------------------
Calculates the RQs of a given event. See `the list of RQs <https://gitlab.com/supercdms/Analysis/pyCRP/-/blob/master/docs/RQs.md>`_ for details.

.. autoclass:: pycrp._rq.RQ
    :members:
    :undoc-members:
    :private-members:

Trace
--------------------------
Converting different format of traces into a dictionary.

Optional to cut traces based on average, slope, skewness and range. Those cut can reject the raw traces with pulses, so the noise spectrum will be more precise. 

.. automodule:: pycrp._trace
    :members:
    :undoc-members:
    :private-members:

Utilities function
--------------------------
Some utilities functions

.. autoclass:: pycrp._utils.Utils
    :members:
    :undoc-members:
    :private-members:


Event Reader
--------------------------
_event.py script includes a few event reader functions for different IOs. You can use these functions to get raw event traces given the RQs.

import this module by ``from pycrp import *``

Init: ``event = Event(fs=config.Fs, series=args.series, ADC2uA=config.ADC2uA)`` 

Read raw data from RQs: ``event.get_raw_events_{io_type}``.


.. automodule:: pycrp._event
    :members:
    :undoc-members:
    :private-members:


User defined IO
--------------------------
IO functions to read specific datatype. Currently we support Animal(.hdf5) Argonne(.tdms) NEXUS(.mid.gz) and UMass(.hdf5) data

Animal
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: pycrp.io_user.io_Animal
    :members:
    :undoc-members:
    :private-members:

.. automodule:: pycrp.io_user.io_Animal_mat
    :members:
    :undoc-members:
    :private-members:

Argonne
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: pycrp.io_user.io_Argonne
    :members:
    :undoc-members:
    :private-members:


NEXUS
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: pycrp.io_user.io_NEXUS
    :members:
    :undoc-members:
    :private-members:


UMass
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: pycrp.io_user.io_UMass
    :members:
    :undoc-members:
    :private-members:


IO template
--------------------------
The template IO file if you want to work on a different datatype. Follow the template and write your code to load the file.

.. automodule:: pycrp.io_user.io_template
    :members:
    :undoc-members:
    :private-members:


Indices and tables
==========================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
